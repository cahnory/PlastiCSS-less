//
// !Column: Define columns set of any size
// =======================================
//
// Usage:
// ******
//  .column {
//    .column(4);
//  }
//
// Requirement:
// ************
//  + html element must have the dir attribute defined
//    with 'ltr' or 'rtl' value
//

@column-cfg-margin:  2%;
@column-cfg-set:     '-set';
@column-cfg-span:    '.span-';
@column-cfg-jump:    '.jump-';
@column-cfg-break:   @cfg-media-medium - 1;

// !Column and column set
.column(
  @size,
  @margin: @column-cfg-margin,
  @break:  @column-cfg-break,
  @set:    @column-cfg-set,
  @span:   @column-cfg-span,
  @jump:   @column-cfg-jump
) when not (iskeyword(@size)) {
  // wrapper
  @wrapper: ~'@{set}';
  &@{wrapper} {
    .clear();
  }
  
  // column
  width: round(((100% - @margin * (@size - 1)) / @size), @cfg-decimal-percent);
  .vendor(box-sizing, border-box);
  
  // variants
  .column(base-dir, @margin, @cfg-direction);
  .column(span, @size, @margin, @span);
  .column(jump, @size, @margin, @jump, @cfg-direction);
  .column(break, @size, @break, @span, @jump, @cfg-direction);
}

// repartition
// No margin + LTR + RTL
.column(base-dir, @margin, @direction) when (@margin = 0) and (@direction = both) {
  [dir="ltr"] & { .column(base-dir, @margin, ltr) }
  [dir="rtl"] & { .column(base-dir, @margin, rtl) }
}
// No margin + LTR
.column(base-dir, @margin, @direction) when (@margin = 0) and (@direction = ltr) {
  float: left;
}
// No margin + RTL
.column(base-dir, @margin, @direction) when (@margin = 0) and (@direction = rtl) {
  float: right;
}
// Margin + LTR + RTL
.column(base-dir, @margin, @direction) when not (@margin = 0) and (@direction = both) {
  [dir="ltr"] & { .column(base-dir, @margin, ltr) }
  [dir="rtl"] & { .column(base-dir, @margin, rtl) }
}
// Margin + LTR
.column(base-dir, @margin, @direction) when not (@margin = 0) and (@direction = ltr) {
  float: left;
  margin-right: @margin;
  &:last-child {
    margin-right: 0;
  }
}
// Margin + RTL
.column(base-dir, @margin, @direction) when not (@margin = 0) and (@direction = rtl) {
  float: right;
  margin-left: @margin;
  &:last-child {
    margin-left: 0;
  }
}


// !Span
.column(span, @size, @margin, @span) when (isstring(@span)) and not (@span = '') {
  .column(span, @size, @margin, @size, ~'@{span}');
}
.column(span, @size, @margin, @index, @span) when (@index > 2) {
  .column(span, @size, @margin, @index - 1, @span);
}
.column(span, @size, @margin, @index, @span) {
  @innerWidth: (100% - @margin * (@size - 1)) / @size;
  @width:  round(@innerWidth * @index + @margin * (@index - 1), @cfg-decimal-percent);
  
  &@{span}@{index} { width: @width }
}

// !Jump
.column(jump, @size, @margin, @jump, @direction) when (isstring(@jump)) and not (@jump = '') {
  .column(jump, @size, @margin, @size - 1, ~'@{jump}', @direction);
}
.column(jump, @size, @margin, @index, @jump, @direction) when (@index > 1) {
  .column(jump, @size, @margin, @index - 1, @jump, @direction);
}
.column(jump, @size, @margin, @index, @jump, @direction) when (@direction = both) {
  @innerWidth: (100% - @margin * (@size - 1)) / @size;
  @realMargin: round(@innerWidth * @index + @margin * @index, @cfg-decimal-percent);

  [dir="ltr"] &@{jump}@{index} { margin-left: @realMargin }
  [dir="rtl"] &@{jump}@{index} { margin-right: @realMargin }
}
.column(jump, @size, @margin, @index, @jump, @direction) when (@direction = ltr) {
  @innerWidth: (100% - @margin * (@size - 1)) / @size;
  @realMargin: round(@innerWidth * @index + @margin * @index, @cfg-decimal-percent);

  &@{jump}@{index} { margin-left: @realMargin }
}
.column(jump, @size, @margin, @index, @jump, @direction) when (@direction = rtl) {
  @innerWidth: (100% - @margin * (@size - 1)) / @size;
  @realMargin: round(@innerWidth * @index + @margin * @index, @cfg-decimal-percent);

  &@{jump}@{index} { margin-right: @realMargin }
}


// !Break point
.column(break, @size, @break, @span, @jump, @direction) {
  @query: ~'(max-width: @{break})';
  @media @query {
    & {
      margin-left: 0;
      margin-right: 0;
      width: 100%;
    }
    .column(break-span, @size, @span);
    .column(break-jump, @size, @jump, @direction);
  }
}

// !Break > span
.column(break-span, @size, @selector) when (isstring(@selector)) and not (@selector = '') {
  .column(break-span-loop, @size, ~'@{selector}');
}
.column(break-span-loop, @index, @selector) when (@index > 2) {
  .column(break-span-loop, @index - 1, @selector);
}
.column(break-span-loop, @index, @selector) {
  &@{selector}@{index} { width: 100% }
}

// !Break > jump
.column(break-jump, @size, @selector, @direction) when (isstring(@selector)) and not (@selector = '') {
  .column(break-jump-loop, @size - 1, ~'@{selector}', @direction);
}
.column(break-jump-loop, @index, @selector, @direction) when (@index > 1) {
  .column(break-jump-loop, @index - 1, @selector, @direction);
}
.column(break-jump-loop, @index, @selector, @direction) when (@direction = both) {
  [dir] &@{selector}@{index} {
    margin-left: 0;
    margin-right: 0;
  }
}
.column(break-jump-loop, @index, @selector, @direction) when not (@direction = both) {
  &@{selector}@{index} {
    margin-left: 0;
    margin-right: 0;
  }
}