//
// !Column: Define columns set of any size
// =======================================
//
// Usage:
// ******
//  .column {
//    .column(4);
//  }
//
// Output:
// *******
//  .column {
//    float: left;
//    width: 25%;
//    -webkit-box-sizing: border-box;
//    -moz-box-sizing: border-box;
//    box-sizing: border-box;
//  }
//  .column-set {
//    *zoom: 1;
//  }
//  .column-set:after {
//    clear: left;
//    content: '\00A0';
//    display: block;
//    height: 0;
//  }
//  .column.span-2 {
//    width: 50%;
//  }
//  .column.jump-1 {
//    margin-left: 25%;
//  }
//  .column.span-3 {
//    width: 75%;
//  }
//  .column.jump-2 {
//    margin-left: 50%;
//  }
//  .column.span-4 {
//    width: 100%;
//  }
//  .column.jump-3 {
//    margin-left: 75%;
//  }
//
// Requirement:
// ************
//  + html element must have the dir attribute defined
//    with 'ltr' or 'rtl' value
//

@column-cfg-margin:  2%;
@column-cfg-set:     '-set';
@column-cfg-span:    '.span-';
@column-cfg-jump:    '.jump-';
@column-cfg-jump:    '.jump-';
@column-cfg-break:   @cfg-media-medium - 1;

// !Column and column set
.column(
  @size,
  @margin: @column-cfg-margin,
  @break:  @column-cfg-break,
  @set:    @column-cfg-set,
  @span:   @column-cfg-span,
  @jump:   @column-cfg-jump
) when not (iskeyword(@size)) {
  // wrapper
  @wrapper: ~'@{set}';
  &@{wrapper} {
    .clear();
  }
  
  // column
  width: round(((100% - @margin * (@size - 1)) / @size), @cfg-decimal-percent);
  .vendor(box-sizing, border-box);
  
  // variants
  .column(base-dir, @margin);
  .column(span, @size, @margin, @span);
  .column(jump, @size, @margin, @jump);
  .column(break, @size, @break, @span, @jump);
}

// repartition
.column(base-dir, @margin) when (@margin = 0) {
  [dir="ltr"] & { float: left }
  [dir="rtl"] & { float: right }
}
.column(base-dir, @margin) when not (@margin = 0) {
  [dir="ltr"] & {
    float: left;
    margin-right: @margin;
    &:last-child {
      margin-right: 0;
    }
  }
  [dir="rtl"] & {
    float: right;
    margin-left: @margin;
    &:last-child {
      margin-left: 0;
    }
  }
}


// !Span
.column(span, @size, @margin, @span) when (isstring(@span)) and not (@span = '') {
  .column(span, @size, @margin, @size, ~'@{span}');
}
.column(span, @size, @margin, @index, @span) when (@index > 2) {
  .column(span, @size, @margin, @index - 1, @span);
  .column(span-css, @size, @margin, @index, @span);
}
.column(span, @size, @margin, @index, @span) when (@index = 2) {
  .column(span-css, @size, @margin, @index, @span);
}
.column(span-css, @size, @margin, @index, @span) {
  @innerWidth: (100% - @margin * (@size - 1)) / @size;
  @width:  round(@innerWidth * @index + @margin * (@index - 1), @cfg-decimal-percent);
  
  &@{span}@{index} { width: @width }
}

// !Jump
.column(jump, @size, @margin, @jump) when (isstring(@jump)) and not (@jump = '') {
  .column(jump, @size, @margin, @size, ~'@{jump}');
}
.column(jump, @size, @margin, @index, @jump) when (@index > 1) {
  .column(jump, @size, @margin, @index - 1, @jump);
  .column(jump-css, @size, @margin, @index, @jump);
}
.column(jump, @size, @margin, @index, @span, @jump) when (@index = 1) {
  .column(jump-css, @size, @margin, @index, @jump);
}
.column(jump-css, @size, @margin, @index, @jump) {
  @jumps: @index - 1;
  @innerWidth: (100% - @margin * (@size - 1)) / @size;
  @realMargin: round(@innerWidth * @jumps + @margin * (@index - 1), @cfg-decimal-percent);

  [dir="ltr"] &@{jump}@{jumps} { margin-left: @realMargin }
  [dir="rtl"] &@{jump}@{jumps} { margin-right: @realMargin }
}


// !Break point
.column(break, @size, @break, @span, @jump) {
  @query: ~'(max-width: @{break})';
  @media @query {
    & {
      margin-left: 0;
      margin-right: 0;
      width: 100%;
    }
    .column(break-span, @size, @span);
    .column(break-jump, @size, @jump);
  }
}

// !Break > span
.column(break-span, @size, @selector) when (isstring(@selector)) and not (@selector = '') {
  .column(break-span-loop, @size, ~'@{selector}');
}
.column(break-span-loop, @index, @selector) when (@index > 2) {
  .column(break-span-loop, @index - 1, @selector);
  .column(break-span-css, @index, @selector);
}
.column(break-span-loop, @index, @selector) when (@index = 2) {
  .column(break-span-css, @index, @selector);
}
.column(break-span-css, @index, @selector) {
  &@{selector}@{index} { width: 100% }
}

// !Break > jump
.column(break-jump, @size, @selector) when (isstring(@selector)) and not (@selector = '') {
  .column(break-jump-loop, @size - 1, ~'@{selector}');
}
.column(break-jump-loop, @index, @selector) when (@index > 1) {
  .column(break-jump-loop, @index - 1, @selector);
  .column(break-jump-css, @index, @selector);
}
.column(break-jump-loop, @index, @selector) when (@index = 1) {
  .column(break-jump-css, @index, @selector);
}
.column(break-jump-css, @index, @selector) {
  [dir] &@{selector}@{index} {
    margin-left: 0;
    margin-right: 0;
  }
}