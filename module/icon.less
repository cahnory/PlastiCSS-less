// !icon.less
@cfg-icon-size:     1em;
@cfg-icon-position: before;
@cfg-icon-font:     none;

// Set icon with before or after pseudo element.
.icon(@glyphe, @size: @cfg-icon-size, @font: @cfg-icon-font, @direction: @cfg-direction) when not (iskeyword(@glyphe)) {
  .icon(@cfg-icon-position, @glyphe, @size, @font);
}
.icon(before, @glyphe, @size: @cfg-icon-size, @font: @cfg-icon-font, @direction: @cfg-direction) {
  .icon(construct, @glyphe, @size, @font, ~':before', ~':after', @direction);
}
.icon(after, @glyphe, @size: @cfg-icon-size, @font: @cfg-icon-font, @direction: @cfg-direction) {
  .icon(construct, @glyphe, @size, @font, ~':after', ~':before', @direction);
}

// Set icon glyphe
.icon-glyphe(@glyphe, @direction: @cfg-direction) when not (iskeyword(@glyphe)) {
  .icon-glyphe(@cfg-icon-position, @glyphe, @direction);
}
.icon-glyphe(before, @glyphe, @direction: @cfg-direction) {
  .icon-glyphe(construct, @glyphe, ~':before', ~':after', @direction);
}
.icon-glyphe(after, @glyphe, @direction: @cfg-direction) {
  .icon-glyphe(construct, @glyphe, ~':after', ~':before', @direction);
}


// !Private
// ********************************************************** //

// Base icon
.icon(css-base, @glyphe, @size, @font) {
  content: @glyphe;
  .vendor(display, inline-block);
  .icon(css-family, @font);
  .icon(css-size, @size);
  line-height: 1em;
  min-width: 1em;
  speak: none;
  text-align: center;
}

// Font-family
.icon(css-family, @font) when not (@font = none) {
  font-family: @font;
  vertical-align: middle;
}

// Font-size
.icon(css-size, @size) when not (isem(@size)) and not (ispercent(@size)) {
  .rem(font-size, @size);
}
.icon(css-size, @size) when (isem(@size)), (ispercent(@size)) {
  font-size: @size;
}

// Glyphe
.icon-glyphe(construct, @glyphe, @ltr: ~':before', @rtl: ~':after', @direction: @cfg-direction) when (@direction = both) {
  [dir="ltr"] &@{ltr},
  [dir="rtl"] &@{rtl} { content: @glyphe; }
}
.icon-glyphe(construct, @glyphe, @ltr: ~':before', @rtl: ~':after', @direction: @cfg-direction) when (@direction = ltr) {
  &@{ltr} { content: @glyphe; }
}
.icon-glyphe(construct, @glyphe, @ltr: ~':before', @rtl: ~':after', @direction: @cfg-direction) when (@direction = ltr) {
  &@{rtl} { content: @glyphe; }
}

// !Constructor
.icon(construct, @glyphe, @size: @cfg-icon-size, @font: @cfg-icon-font, @ltr: ~':before', @rtl: ~':after', @direction) when (@direction = both) {
  [dir="ltr"] &@{ltr},
  [dir="rtl"] &@{rtl} {
    .icon(css-base, @glyphe, @size, @font);
  }
}
.icon(construct, @glyphe, @size: @cfg-icon-size, @font: @cfg-icon-font, @ltr: ~':before', @rtl: ~':after', @direction) when (@direction = ltr) {
  &@{ltr} {
    .icon(css-base, @glyphe, @size, @font);
  }
}
.icon(construct, @glyphe, @size: @cfg-icon-size, @font: @cfg-icon-font, @ltr: ~':before', @rtl: ~':after', @direction) when (@direction = rtl) {
  &@{rtl} {
    .icon(css-base, @glyphe, @size, @font);
  }
}

