//
// !Helpers: provide common "behaviors"
// ====================================
//

// !clear(@clear: both) — Apply on floats parent
.clear(@clear: both) {
  & { *zoom: 1 }
  &:after {
    clear: @clear;
    content: @utf-nbsp;
    display: block;
    height: 0;
  }
}

// !margin-collapse([bottom|top])
.margin-collapse() {
  .margin-collapse(bottom);
  .margin-collapse(top);
}
.margin-collapse(top) {
  &:before {
    content: @utf-nbsp;
    display: block;
    height: 0;
  }
}
.margin-collapse(bottom) {
  &:after {
    content: @utf-nbsp;
    display: block;
    height: 0;
  }
}

// !oust() — OutSight
.oust() {
  border: none;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
.oust(text) {
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}

// Absolute position an element by top, right, bottom and left
.pin(@rest,...) {
  position: absolute;
}
.pin(@pos) {
  top: @pos;
  right: @pos;
  bottom: @pos;
  left: @pos;
}
.pin(@y, @x) {
  top: @y;
  right: @x;
  bottom: @y;
  left: @x;
}
.pin(@top, @right, @bottom) {
  top: @top;
  right: @right;
  bottom: @bottom;
  left: @right;
}
.pin(@top, @right, @bottom, @left) {
  top: @top;
  right: @right;
  bottom: @bottom;
  left: @left;
}

// Absolute position an element by left or right and top or bottom
.pos(@rest,...) {
  position: absolute;
}
.pos(@pos, @ref: top left) when not (isnumber(@ref)) {
  .pos(@pos, @pos, @ref);
}
.pos(@x, @y) when (isnumber(@y)) {
  .pos(@x, @y, top left);
}
.pos(@x, @y, @ref) when (@ref = left), (@ref = ~'left top'), (@ref = ~'left bottom'), (@ref = ~'top left'), (@ref = ~'bottom left') {
  left: @x;
}
.pos(@x, @y, @ref) when (@ref = right), (@ref = ~'right top'), (@ref = ~'right bottom'), (@ref = ~'top right'), (@ref = ~'bottom right') {
  right: @x;
}
.pos(@x, @y, @ref) when (@ref = top), (@ref = ~'top left'), (@ref = ~'top right'), (@ref = ~'left top'), (@ref = ~'right top') {
  top: @y;
}
.pos(@x, @y, @ref) when (@ref = bottom), (@ref = ~'bottom left'), (@ref = ~'bottom right'), (@ref = ~'left bottom'), (@ref = ~'right bottom') {
  bottom: @y;
}

// Relative position an element by left or right and top or bottom
.move(@rest,...) {
  position: relative;
}
.move(@pos, @ref: top left) when not (isnumber(@ref)) {
  .move(@pos, @pos, @ref);
}
.move(@x, @y) when (isnumber(@y)) {
  .move(@x, @y, top left);
}
.move(@x, @y, @ref) when (@ref = left), (@ref = ~'left top'), (@ref = ~'left bottom'), (@ref = ~'top left'), (@ref = ~'bottom left') {
  left: @x;
}
.move(@x, @y, @ref) when (@ref = right), (@ref = ~'right top'), (@ref = ~'right bottom'), (@ref = ~'top right'), (@ref = ~'bottom right') {
  right: @x;
}
.move(@x, @y, @ref) when (@ref = top), (@ref = ~'top left'), (@ref = ~'top right'), (@ref = ~'left top'), (@ref = ~'right top') {
  top: @y;
}
.move(@x, @y, @ref) when (@ref = bottom), (@ref = ~'bottom left'), (@ref = ~'bottom right'), (@ref = ~'left bottom'), (@ref = ~'right bottom') {
  bottom: @y;
}

// Set size of an element
.size(@size) {
  height: @size;
  width: @size;
}
.size(@width, @height) {
  height: @height;
  width: @width;
}

// !scroll([x|y:y,] @other: auto)
.scroll(@x: auto) when not (@x = x) and not(@x = y) {
  .scroll(y, @x);
}
.scroll(x, @y: auto) {
  overflow-x: scroll;
  overflow-y: @y;
  overflow: -moz-scrollbars-horizontal;
}
.scroll(y, @x: auto) {
  overflow-x: @x;
  overflow-y: scroll;
  overflow: -moz-scrollbars-vertical;
}